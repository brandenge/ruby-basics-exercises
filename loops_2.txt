    *** 1 - Even Or Odd? ***

Problem: Write a loop that prints numbers 1-5 and whether the number is even or odd. Use the code below to get started.

count = 1

loop do
  count += 1
end

Solution:

count = 1

loop do
  puts "#{count} is #{count.odd? ? "odd" : "even"}!"
  break if count == 5
  count += 1
end

    *** 2 - Catch the Number ***

Problem: Modify the following code so that the loop stops if number is equal to or between 0 and 10.

loop do
  number = rand(100)
  puts number
end

Solution:

loop do
  number = rand(100)
  number <= 10 ? ((puts number); break) : (puts number)
end

loop do
  number = rand(100)
  puts number
  break if number >= 0 && number <= 10
end

loop do
  number = rand(100)
  puts number
  break if number.between?(0, 10)
end

loop do
  number = rand(100)
  puts number
  break if (0..10).include? number
end

    *** 3 - Conditional Loop ***

Problem: Write an if/else statement that executes some code if the process_the_loop variable is true and some other code when process_the_loop is false. Specifically:

When process_the_loop is true, execute a loop that iterates exactly once and prints The loop was processed during that iteration.
When process_the_loop is false, just print The loop wasn't processed!.
Use the following code to initialize process_the_loop. It will randomly assign the variable to either true or false.

process_the_loop = [true, false].sample

Solution:

process_the_loop = [true, false].sample

if process_the_loop
  loop do
    puts "The loop was processed!"
    break
  end
else
  puts "The loop wasn't processed!"
end

    *** 4 - Get the Sum ***

Problem: The code below asks the user "What does 2 + 2 equal?" and uses #gets to retrieve the user's answer. Modify the code so "That's correct!" is printed and the loop stops when the user's answer equals 4. Print "Wrong answer. Try again!" if the user's answer doesn't equal 4.

loop do
  puts 'What does 2 + 2 equal?'
  answer = gets.chomp.to_i
end

Solution:

loop do
  puts 'What does 2 + 2 equal?'
  answer = gets.chomp.to_i
  answer == 4 ? break : (puts "Wrong answer. Try again!")
end
puts "That's correct!"

    *** 5 - Insert Numbers ***

Problem: Modify the code below so that the user's input gets added to the numbers array. Stop the loop when the array contains 5 numbers.

numbers = []

loop do
  puts 'Enter any number:'
  input = gets.chomp.to_i
end
puts numbers

Solution:

numbers = []

loop do
  puts 'Enter any number:'
  numbers << input = gets.chomp.to_i
  break if numbers.count == 5
end
puts numbers

    *** 6 - Empty the Array ***

Problem: Given the array below, use loop to remove and print each name. Stop the loop once names doesn't contain any more elements.

names = ['Sally', 'Joe', 'Lisa', 'Henry']
Keep in mind to only use loop, not while, until, etc.

Solution:

names = ['Sally', 'Joe', 'Lisa', 'Henry']

loop do
  names.empty? ? break : (puts names.shift)
end

names = ['Sally', 'Joe', 'Lisa', 'Henry']

loop do
  puts names.shift
  break if names.empty?
end

names = ['Sally', 'Joe', 'Lisa', 'Henry']

loop do
  break if names == []
  puts names.pop
end

names = ['Sally', 'Joe', 'Lisa', 'Henry']

loop do
  break if names == []
  puts names.first
  names.delete(names.first)
end

    *** 7 - Stop Counting ***

Problem: The method below counts from 0 to 4. Modify the block so that it prints the current number and stops iterating when the current number equals 2.

5.times do |index|
  # ...
end

Solution:

3.times do |index|
  puts index
end

5.times do |index|
  puts index
  break if index == 2
end

    *** 8 - Only Even ***

Problem: Using next, modify the code below so that it only prints even numbers.

number = 0

until number == 10
  number += 1
  puts number
end

Solution:

number = 0

until number == 10
  number += 1
  puts number.odd? ? next : number
end

number = 0

until number == 10
  number += 1
  next if number.odd?
  puts number
end

Further exploration: Why did next have to be placed after the incrementation of number and before #puts?

next has to be put after the incrementation of number or else each iteration of the loop will never progress the number. It will be stuck at the next odd number (in this case, the number 1) and then be stuck there in an infinite process_the_loop.

next has to be put before #puts or else it will output the odd numbers too, and will therefore be effectively doing nothing to change the behavior or output.

    *** 9 - First to Five ***

Problem: The following code increments number_a and number_b by either 0 or 1. loop is used so that the variables can be incremented more than once, however, break stops the loop after the first iteration. Use next to modify the code so that the loop iterates until either number_a or number_b equals 5. Print "5 was reached!" before breaking out of the loop.

number_a = 0
number_b = 0

loop do
  number_a += rand(2)
  number_b += rand(2)

  break
end

Solution:

number_a = 0
number_b = 0

loop do
  number_a += rand(2)
  number_b += rand(2)
  next unless number_a == 5 || number_b == 5

  puts '5 was reached!'
  break
end

number_a = 0
number_b = 0

loop do
  number_a += rand(2)
  number_b += rand(2)
  if (number_a == 5 || number_b == 5)
    puts "5 was reached!" if (number_a == 5 || number_b == 5)
    break
  end
end

    *** 10 - Greeting ***

Problem: Given the code below, use a while loop to print "Hello!" twice.

def greeting
  puts 'Hello!'
end

number_of_greetings = 2

Solution:

def greeting
  number_of_greetings = 2
  while number_of_greetings > 0
    puts 'Hello!'
    number_of_greetings -= 1
  end
end
greeting

def greeting(number_of_greetings)
  while number_of_greetings > 0
    puts 'Hello!'
    number_of_greetings -= 1
  end
end
greeting(2)

def greeting
  puts 'Hello!'
end

number_of_greetings = 2

while number_of_greetings > 0
  greeting
  number_of_greetings -= 1
end
