    *** 1 - Print Me (Part 1) ***

Problem: Write a method named print_me that prints I'm printing within the method! when invoked as follows:

print_me

Solution:

def print_me
  puts "I'm printing within the method!"
end

print_me

    *** 2 - Print Me (Part 2) ***

Problem: Write a method named print_me so that I'm printing the return value! is printed when running the following code:

puts print_me

Solution:

def print_me
  "I'm printing the return value!"
end

puts print_me

    *** 3 - Greeting Through Methods (Part 1) ***

Problem: Write two methods, one that returns the string "Hello" and one that returns the string "World". Then print both strings using #puts, combining them into one sentence.

Expected output:

Hello World

Solution:

def hello_str
  "Hello"
end

def world_str
  "World"
end

puts "#{hello_str} #{world_str}"

    *** 4 - Greeting Through Methods (Part 2) ***

Problem: Write a method named greet that invokes the following methods:

def hello
  'Hello'
end

def world
  'World'
end

When greet is invoked with #puts, it should output the following:

Hello World

Make sure you add a space between "Hello" and "World", however, you're not allowed to modify hello or world.

Solution:

def hello
  'Hello'
end

def world
  'World'
end

def greet
  "#{hello} #{world}"
end

puts greet

    *** 5 - Make and Model ***

Problem: Using the following code, write a method called car that takes two arguments and prints a string containing the values of both arguments.

car('Toyota', 'Corolla')

Expected output:

Toyota Corolla

Solution:

def car(make, model)
  puts "#{make} #{model}"
end

car('Toyota', 'Corolla')

Further Exploration:

Remove the #puts call from the car method. Modify your program so it still prints the result.

def car(make, model)
  "#{make} #{model}"
end

puts car('Toyota', 'Corolla')

How do the return values of car differ with and without the #puts?

Without #puts as the last statement inside of the method, the method will return the string. With #puts as the last statement inside of the method, the method will return nil because #puts returns nil.

    *** 6 - Day or Night? ***

Problem: The variable below will be randomly assigned as true or false. Write a method named time_of_day that, given a boolean as an argument, prints "It's daytime!" if the boolean is true and "It's nighttime!" if it's false. Pass daylight into the method as the argument to determine whether it's day or night.

daylight = [true, false].sample

Solution:

daylight = [true, false].sample

def time_of_day(daylight)
  puts daylight ? "It's daytime!" : "It's nighttime!"
end

time_of_day(daylight)

    *** 7 - Naming Animals ***

Problem: Run the code as it is shown below, and take notice of any error messages.

def dog
  return name
end

def cat(name)
  return name
end

puts "The dog's name is #{dog('Spot')}."
puts "The cat's name is #{cat}."

Based on what the error messages are telling you, update the relevant method definitions and method invocations as necessary so that the names are printed as shown below.

Expected output:

The dog's name is Spot.
The cat's name is Ginger.

Solution:

def dog(name)
  return name
end

def cat(name)
  return name
end

puts "The dog's name is #{dog('Spot')}."
puts "The cat's name is #{cat('Ginger')}."

    *** 8 - Name Not Found ***

Problem: Write a method that accepts one argument, but doesn't require it. The parameter should default to the string "Bob" if no argument is given. The method's return value should be the value of the argument.

puts assign_name('Kevin') == 'Kevin'
puts assign_name == 'Bob'

The code should output true twice.

Solution:

def assign_name(name = 'Bob')
  name
end

puts assign_name('Kevin') == 'Kevin'
puts assign_name == 'Bob'

    *** 9 - Multiply the Sum ***

Problem: Write the following methods so that each output is true.

puts add(2, 2) == 4
puts add(5, 4) == 9
puts multiply(add(2, 2), add(5, 4)) == 36

Solution:

def add(num1, num2)
  num1 + num2
end

def multiply(num1, num2)
  num1 * num2
end

puts add(2, 2) == 4
puts add(5, 4) == 9
puts multiply(add(2, 2), add(5, 4)) == 36

    *** 10 - Random Sentence ***

Problem: The variables below are both assigned to arrays. The first one, names, contains a list of names. The second one, activities, contains a list of activities. Write the methods name and activity so that they each take the appropriate array and return a random value from it. Then write the method sentence that combines both values into a sentence and returns it from the method.

names = ['Dave', 'Sally', 'George', 'Jessica']
activities = ['walking', 'running', 'cycling']

puts sentence(name(names), activity(activities))

Example output:

George went walking today!

Solution:

names = ['Dave', 'Sally', 'George', 'Jessica']
activities = ['walking', 'running', 'cycling']

def name(names)
  names.sample
end

def activity(activities)
  activities.sample
end

def sentence(name, activity)
  "#{name} went #{activity} today!"
end

puts sentence(name(names), activity(activities))
